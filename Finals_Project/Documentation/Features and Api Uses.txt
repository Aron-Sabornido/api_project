**Features**

- Geocoding: Users can enter two addresses (FROM and TO). The app retrieves their corresponding latitude and longitude.
- Weather Information: Fetches and displays the temperature, weather description, humidity, and wind speed for both locations using the OpenWeatherMap API.
- Driving Directions: Displays driving directions between the two locations with a map and step-by-step instructions using the Google Directions API.
- Responsive Layout: The user interface is designed to adapt to different screen sizes.



**APIs Integrated**
-- Google Maps Geocoding API
Purpose: Converts addresses provided by the user (FROM and TO) into geographical coordinates (latitude and longitude).

Integration:

The user inputs addresses on the form.

Flask processes the input and makes a request to the Google Geocoding API to get the location's coordinates and formatted address.
The API responds with geographical data (latitude, longitude, and formatted address).

**Endpoint: https://maps.googleapis.com/maps/api/geocode/json**

-- Google Maps Directions API
Purpose: Provides step-by-step driving directions between the FROM and TO locations, calculating distance and duration.

Integration:

After obtaining the geocoded locations, the application uses the Google Directions API to calculate the route between the two points.
The map is displayed on the frontend using Google Maps JavaScript API, with directions rendered as a polyline on the map.

**Endpoint: https://maps.googleapis.com/maps/api/directions/json**

-- OpenWeatherMap API
Purpose: Fetches real-time weather data (temperature, description, humidity, wind speed) for the FROM and TO locations based on their coordinates.

Integration:

The geocoded latitude and longitude of both locations are passed to the OpenWeatherMap API.
The API responds with the current weather conditions, which are displayed on the result page.

**Endpoint: https://api.openweathermap.org/data/2.5/weather**